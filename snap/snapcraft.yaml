%YAML 1.1
---
# Snapcraft Recipe for XMLStarlet Command Line XML Toolkit
# ------------------------------
# This file is in the YAML data serialization format:
# http://yaml.org
# For the spec. of writing this file refer the following documentation:
# * The snapcraft format
#   https://docs.snapcraft.io/the-snapcraft-format/8337
# * Snap Documentation
#   https://docs.snapcraft.io
# * Topics under the doc category in the Snapcraft Forum
#   https://forum.snapcraft.io/c/doc
# For support refer to the snapcraft section in the Snapcraft Forum:
# https://forum.snapcraft.io/c/snapcraft
name: xmlstarlet
summary: Command line utilities to transform, query, validate, and edit XML files
description: |
  XMLStarlet is a set of command line utilities (tools) which can be used to transform, query, validate, and edit XML documents and files using simple set of shell commands in similar way it is done for plain text files using UNIX grep, sed, awk, diff, patch, join, etc commands.

  This set of command line utilities can be used by those who deal with many XML documents on UNIX shell command prompt as well as for automated XML processing with shell scripts.

  The toolkit's feature set includes options to:

  * Check or validate XML files (simple well-formedness check, DTD, XSD, RelaxNG)
  * Calculate values of XPath expressions on XML files (such as running sums, etc)
  * Search XML files for matches to given XPath expressions
  * Apply XSLT stylesheets to XML documents (including EXSLT support, and passing parameters to stylesheets)
  * Query XML documents (ex. query for value of some elements of attributes, sorting, etc)
  * Modify or edit XML documents (ex. delete some elements)
  * Format or "beautify" XML documents (as changing indentation, etc)
  * Fetch XML documents using http:// or ftp:// URLs
  * Browse tree structure of XML documents (in similar way to 'ls' command for directories)
  * Include one XML document into another using XInclude
  * XML c14n canonicalization
  * Escape/unescape special XML characters in input text
  * Print directory as XML document
  * Convert XML into PYX format (based on ESIS - ISO 8879), and vice versa

  This is NOT an official snap distribution of XMLStarlet.  Refer the issue tracker for any problems regarding the use of this snap:

      Issues Â· Lin-Buo-Ren/xmlstarlet-snap
      https://github.com/Lin-Buo-Ren/xmlstarlet-snap/issues

# The path of icon to represent the snap, relative to the source tree directory
# Only PNG or SVG image is supported, dimension must be greater than 256x256px
icon: snap/gui/xmlstarlet.adapted.png

# Version string just for humans, typically '1.2+git' or '1.3.2'
# The wrapping single quotes are often required to avoid the version string
# being accidentally interpreted as a YAML non-string(like '1', '1.2').
# http://yaml.org/type
# https://arp242.net/weblog/yaml_probably_not_so_great_after_all.html#surprising-behaviour
version: determined-by-version-script

# (OPTIONAL) The version string can also be dynamically determined via scripting
# , in this case the value of the `version` key will be ignored (but the key is
# still required).
# NOTE: The resulting version string cannot be longer than 32 characters
version-script: ./snap/local/build-utilities/set-snap-version.bash
#version-script: git -C parts/my-app-part/src describe --always --dirty --tags

confinement: strict
grade: devel

# Refer the following documentation for asserting interface plugs and slots in a security confined snap:
# Interface management - doc - snapcraft.io
# https://docs.snapcraft.io/interface-management/6154
# Supported interfaces - doc - snapcraft.io
# https://docs.snapcraft.io/supported-interfaces/7744
# Non-A/C: Non-autoconnect interface
plugs:
  # Storage access
  home:
  removable-media: # Non-A/C

  # Network access(used by `xmlstarlet validate --net`?)
  network:

#slots:

apps:
  xmlstarlet:
    command: >
      bin/locales-launch
      "${SNAP}"/bin/xmlstarlet-launch
      xmlstarlet

  xml:
    command: >
      bin/locales-launch
      "${SNAP}"/bin/xmlstarlet-launch
      xml

parts:
  # Utility programs to help with package building
  #build-utilities:
    #source: snap/local/build-utilities
    #plugin: dump
    #organize:
      #'*': assets/build-utilities/
    #prime:
    #- -*

  # Launcher programs to fix problems at runtime
  launchers:
    source: snap/local/launchers
    plugin: dump
    organize:
      '*': bin/
    stage:
    - -bin/README.*

  # Program patches to solve issues that can't be solved by tweaking in runtime
  #patches:
    #source: snap/local/patches
    #plugin: dump
    #organize:
      #'*': assets/patches/
    #prime:
    #- -*

  # Helper programs that can be called at snap runtime
  #helpers:
    #source: snap/local/helpers
    #plugin: dump
    #organize:
      #'*': bin/
    #stage:
    #- -bin/README.*

  # Remote part for fixing the glibc locales(and gnu gettext I18N support)
  # This part is only required for non GUI apps that don't uses the desktop-launch launchers
  locales-launch:

  # Remote part for recording the exact revision for each part during building
  parts-meta-info:

  xmlstarlet:
    source: git://git.code.sf.net/p/xmlstar/code
    source-depth: 100

    plugin: autotools
    build-packages:
    # PDF documentation generation
    - fop

    # Postscript documentation generation
    - ghostscript

    - libxslt1-dev
    - xsltproc
    stage-packages:
    - libxml2
    - libxslt1.1
    override-build: |
      set \
        -o errexit

      autoreconf -sif
      snapcraftctl build

      # Create compat links
      ln \
        --force \
        --symbolic \
        --verbose \
        xml \
        ../install/bin/xmlstarlet
